#include <check.h>
#include <stdio.h>

#include "affine.h"

/*
List tests
*/

#test push_and_pop_list_uint
List *l = init_list();
ck_assert(is_list_empty(l));
for (unsigned int i = 1; i <= 10000; i++) {
  Data data = {.index = i};
  push_back_to_list(l, data);
}
for (unsigned int i = 1; i <= 10000; i++) {
  ck_assert(!is_list_empty(l));
  Data popped = pop_front_from_list(l);
  ck_assert_uint_eq(popped.index, i);
}
ck_assert(is_list_empty(l));
destroy_list(l);

#test push_and_pop_list_double
List *l = init_list();
ck_assert(is_list_empty(l));
for (double i = -100.0; i <= 100.0; i += 0.01) {
  Data data = {.value = i};
  push_back_to_list(l, data);
}
for (double i = -100.0; i <= 100.0; i += 0.01) {
  ck_assert(!is_list_empty(l));
  Data popped = pop_front_from_list(l);
  ck_assert_uint_eq(popped.value, i);
}
ck_assert(is_list_empty(l));
destroy_list(l);

#test pop_from_empty_list
List *l = init_list();
ck_assert(is_list_empty(l));
Data result = pop_front_from_list(l);
ck_assert(is_list_empty(l));
ck_assert_double_eq(result.value, -1);
destroy_list(l);

#test parse_obj_simple
Obj *obj = parse_obj("./models/simple_cube.obj");
ck_assert_uint_eq(24, obj->vertexes_count);
ck_assert_uint_eq(24, obj->f_count);
ck_assert_uint_eq(24 * 6, obj->faces_count);
clean_obj(obj);

#test parse_obj_incorrect_vertex
Obj *obj = parse_obj("./models/simple_cube_incorrect_vertex.obj");
ck_assert(!obj);
clean_obj(obj);

#test parse_obj_incorrect_face
Obj *obj = parse_obj("./models/simple_cube_incorrect_face.obj");
ck_assert(!obj);
clean_obj(obj);

#test affine_transformations_test
Obj *obj = parse_obj("./models/simple_cube.obj");
double *new_vertexes = calloc(obj->vertexes_count, sizeof(double));
translate_model(obj, new_vertexes, 50, 50, -50, 4, 4, 4, 90, 175);
double *compare_vertexes = calloc(obj->vertexes_count, sizeof(double));
double cos_x = cos(M_PI * 90 / 180.0), cos_y = cos(M_PI * 175 / 180.0),
       sin_x = sin(M_PI * 90 / 180.0), sin_y = sin(M_PI * 175 / 180.0);
for (size_t i = 0; i < obj->vertexes_count; i += 3) {
  compare_vertexes[i] =
      4 * (obj->vertexes[i] * cos_x + obj->vertexes[i + 2] * sin_x) + 50;
  compare_vertexes[i + 1] =
      4 * (obj->vertexes[i + 1] * cos_y + obj->vertexes[i] * sin_x * sin_y -
           obj->vertexes[i + 2] * cos_x * sin_y) +
      50;
  compare_vertexes[i + 2] =
      4 * (obj->vertexes[i + 1] * sin_y - obj->vertexes[i] * sin_x * cos_y +
           obj->vertexes[i + 2] * cos_x * cos_y) +
      -50;

  ck_assert_double_eq(new_vertexes[i], compare_vertexes[i]);
  ck_assert_double_eq(new_vertexes[i + 1], compare_vertexes[i + 1]);
  ck_assert_double_eq(new_vertexes[i + 2], compare_vertexes[i + 2]);
}
free(new_vertexes);
free(compare_vertexes);
clean_obj(obj);
